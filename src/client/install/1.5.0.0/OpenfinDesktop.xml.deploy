<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenfinDesktop</name>
    </assembly>
    <members>
        <member name="T:Openfin.Desktop.Ack">
            <summary>
                A message that is delivered to an AckListener when an action has 
                been processed by AppDesktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.#ctor(Newtonsoft.Json.Linq.JObject,System.Object)">
            <summary>
                class Ack constructor.
            </summary>
            <param name="message">The message being delivered to the AckListener.</param>
            <param name="source">The message source.</param>
        </member>
        <member name="M:Openfin.Desktop.Ack.isSuccessful">
            <summary>
                Returns true if message contains "success":"true".
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getJsonObject">
            <summary>
                Returns the message as a JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getData">
            <summary>
                Returns the value of "data" from message as JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getSource">
            <summary>
                Returns the message source.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AnimationOptions">
            <summary>
                A class representing the options for a Window animation.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationOptions.#ctor(System.Boolean)">
            <summary>
                Constructs an instance with the passed value for property Interrupt
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnimationOptions.Raw">
            <summary>
                The Raw property represents the name for the window which 
                must be unique within the context of the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Raw property gets the value of the underlying JObject.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationOptions.Interrupt">
            <summary>
                The Interrupt property represents a flag which determines if a call to Window.animate 
                will interrupt all pending transitions, or add itself to the queue.
                <para>Default: true</para>
            </summary> 
            <value>
                The Interrupt property gets/sets the value of the underlying 
                JObject field, "interrupt".
            </value> 
        </member>
        <member name="T:Openfin.Desktop.IAnimationTransition">
            <summary>
                A base class representing a transition of the window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.IAnimationTransition.Raw">
            <summary>
                The Raw property represents the underliying 
                JObject containing the transition's settings.
            </summary> 
            <value>
                The Raw property gets/sets the value of the underlying JObject.
            </value> 
        </member>
        <member name="T:Openfin.Desktop.OpacityTransition">
            <summary>
                A class representing a transition of a Window's opacity.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.OpacityTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.OpacityTransition.#ctor(System.Double,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="opacity">The resulting opacity of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="P:Openfin.Desktop.OpacityTransition.Opacity">
            <summary>
                The Opacity property represents the resulting opacity of the window.
                <para>This value is clamped beween 0.0 and 1.0</para>
                <para>Default: 1.0</para>
            </summary> 
            <value>
                The Opacity property gets/sets the value of the underlying 
                JObject field, "opacity".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.OpacityTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="T:Openfin.Desktop.SizeTransition">
            <summary>
                A class representing a transition of a Window's dimensions.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="width">The resulting width of the window.</param>
            <param name="height">The resulting height of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.onlyWidth(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's width.
            </summary>
            <param name="width">The resulting width of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.onlyHeight(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's height.
            </summary>
            <param name="height">The resulting height of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Width">
            <summary>
                The Width property represents the resulting width of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Width property gets/sets the value of the underlying 
                JObject field, "width".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Height">
            <summary>
                The Height property represents the resulting height of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Height property gets/sets the value of the underlying 
                JObject field, "height".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="T:Openfin.Desktop.PositionTransition">
            <summary>
                A class representing a transition of a Window's position.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="left">The resulting left position of the window.</param>
            <param name="top">The resulting top position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.onlyLeft(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's left position.
            </summary>
            <param name="left">The resulting left position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.onlyTop(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's top position.
            </summary>
            <param name="top">The resulting top position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Left">
            <summary>
                The Left property represents the resulting left position of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Left property gets/sets the value of the underlying 
                JObject field, "left".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Top">
            <summary>
                The Top property represents the resulting top position of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Top property gets/sets the value of the underlying 
                JObject field, "top".
            </value>
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="T:Openfin.Desktop.AnimationTransitions">
            <summary>
                A class representing a collection of transitions for a Window animation.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationTransitions.isTransitionEmpty(Openfin.Desktop.IAnimationTransition)">
            <summary>
                Helper utility for determining if an underliying transition contains configured data.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationTransitions.ToJObject">
            <summary>
                Returns all the underliying transitions as one JObject.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Opacity">
            <summary>
                The Opacity property represents a transition of the Window's opacity.
            </summary> 
            <value>
                The Opacity property gets/sets the value of the internal OpacityTransition. 
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Size">
            <summary>
                The Size property represents a transition of the Window's dimensions.
            </summary> 
            <value>
                The Size property gets/sets the value of the internal SizeTransition. 
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Position">
            <summary>
                The Position property represents a transition of the Window's position.
            </summary> 
            <value>
                The Position property gets/sets the value of the internal PositionTransition. 
            </value> 
        </member>
        <member name="T:Openfin.Desktop.childWindowHandler">
            <summary>
                A delegate to handle the resulting windows from 
                Application.getChildWindow().
            </summary>
            <param name="children"></param>
        </member>
        <member name="T:Openfin.Desktop.applicationGroupsHandler">
            <summary>
                A delegate to handle the returned groups and 
                their respective windows from Application.getGroups().
            </summary>
            <param name="groups">A list of groups and their member windows.</param>
        </member>
        <member name="T:Openfin.Desktop.Application">
            <summary>
                An object representing the Application.
                <para>
                    Allows the developer to execute, show and close an application, 
                    as well as show and hide an icon on Desktop. Also provides access 
                    to the Window object for the main application window to control 
                    window state such as the ability to minimize, maximize, restore, etc.
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.#ctor(Openfin.Desktop.ApplicationOptions,Openfin.Desktop.DesktopConnection,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Application Constructor.
            </summary>
            <param name="options">Settings of the application.<see cref="T:Openfin.Desktop.ApplicationOptions"/></param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.#ctor(System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches an Application object to an application that already exists.
                <seealso cref="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)"/>
            </summary>
            <param name="uuid"> The UUID of the Application to wrap.</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches an Application object to an application that already exists.
            </summary>
            <param name="uuid"> The UUID of the Application to wrap.</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Application.initialize">
            <summary>
                Allocates and prepares internal JObjects and wraps the Applications main window.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.getOptions">
            <returns>
                The ApplicationOptions object for the application
                <see cref="T:Openfin.Desktop.ApplicationOptions"/>
            </returns>
        </member>
        <member name="M:Openfin.Desktop.Application.getUuid">
            <returns>
                The applications registered UUID with the AppDesktop.
            </returns>
        </member>
        <member name="M:Openfin.Desktop.Application.addEventListener(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                   closed
                   crashed
                   error
                   not-responding
                   out-of-memory
                   responding
                   started
            </remarks>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                   closed
                   crashed
                   error
                   not-responding
                   out-of-memory
                   responding
                   started
            </remarks>
            <param name="type">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.close(System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Closes the application
            </summary>
            <param name="force">
                When true the close can not be prevented through the window event 'close-requested'
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getChildWindows(Openfin.Desktop.childWindowHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of wrapped child windows for the current application to childHandler.
            </summary>
            <remarks>
                The Application's main window IS NOT a child window.
                The list is empty if the application has no child windows.
            </remarks>
            <param name="childHandler">
                A delegate that receives a list wrapped child windows for the current application.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getGroups(Openfin.Desktop.applicationGroupsHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of groups and their wrapped child windows 
                for the current application to groupHandler.
            </summary>
            <param name="groupHandler">
                 A delegate that receives a list of groups for the current application. 
                 Each group is represented as a list of wrapped child windows.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getManifest(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the JSON manifest that was used to create the application.
                Invokes the error callback if the application was not created from a manifest.
            </summary>
            <param name="callback">
                A function that is called and passed an Ack containing the JObject manifest 
                that was used to create the application.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getWindow">
            <returns>
                The main Window object of the application.
                <see cref="T:Openfin.Desktop.Window"/>
            </returns>
        </member>
        <member name="M:Openfin.Desktop.Application.isRunning(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Determines if the application is currently running/active.
            </summary>
            <param name="callback">
                A function that is called if the method succeeds and 
                passed an object containg the running/active state of the window.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.pingChildWindow(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <param name="name">The name of the window to ping.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.remove(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes the application.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                   closed
                   crashed
                   error
                   not-responding
                   out-of-memory
                   responding
                   started
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.restart(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Restart the application.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.run(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Runs the application on the AppDesktop.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.terminate(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Terminates the application.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.waitFor(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Wait for the application if it is unresponsive.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="P:Openfin.Desktop.Application.DesktopConnection">
            <returns>
                The applications connection object with the AppDesktop.
                <see cref="P:Openfin.Desktop.Application.DesktopConnection"/>
            </returns>
        </member>
        <member name="T:Openfin.Desktop.ApplicationOptions">
            <summary>
                Helper object that provides getters/setters for the 
                various options needed for creating an Application.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ApplicationOptions.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Constructs an instance with the passed options.
            </summary>
            <param name="options">a JObject containing application settings.</param>
        </member>
        <member name="M:Openfin.Desktop.ApplicationOptions.#ctor(System.String,System.String,System.String)">
            <summary>
                Constructs an instance configuring a new underlying JObject 
                with the passed values.
            </summary>
            <param name="name">The name of the application.</param>
            <param name="uuid">The UUID of the application</param>
            <param name="url">The url for the application to load.</param>
        </member>
        <member name="M:Openfin.Desktop.ApplicationOptions.getJsonCopy">
            <summary>
                Gets all settings in JObject format.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.Raw">
            <summary>
                Gets the underliying JObject containing the options.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.ApplicationIcon">
            <summary>
                The ApplicationIcon property represents the icon to display for the 
                Application's main window.
                <para>
                    Support formats: 
                        Portable Network Graphic (PNG); Size: 256 x 256 
                </para>
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The ApplicationIcon property gets/sets the value of the underlying 
                JObject field, "applicationIcon".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.Name">
            <summary>
                The Name property represents the the name for the Application's
                main window window which must be unique within the context of 
                the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Name property gets the value of the underlying 
                JObject field, "name".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.UUID">
            <summary>
                The UUID property represents the UUID of the application 
                as known by the AppDesktop.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The UUID property gets the value of the underlying 
                JObject field, "uuid".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.IsAdmin">
            <summary>
                The IsAdmin property represents if the application has 
                administrator privileges. (e.g., the ability to create 
                and run applications). 
                <para>Default: false</para>
            </summary> 
            <value>
                The IsAdmin property gets/sets the value of the underlying 
                JObject field, "isAdmin".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.MainWindowOptions">
            <summary>
                The IsAdmin property represents the options 
                of the main window of the application.
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.Version">
            <summary>
                The Version property represents the version 
                of the application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Version property gets/sets the value of the underlying 
                JObject field, "version".
            </value> 
        </member>
        <member name="T:Openfin.Desktop.CallbackSourcePair`1">
            <summary>
                Creates a pairing between CallbackType and an object on construction.
            </summary>
            <typeparam name="CallbackType">The object type to store on construction and retrieve with getCallback().</typeparam>
        </member>
        <member name="M:Openfin.Desktop.CallbackSourcePair`1.#ctor(`0,System.Object)">
            <summary>
                Constructs a pairing between the callback and source
            </summary>
            <param name="callback">Object to return via getCallback()</param>
            <param name="source">Object to return via getSource()</param>
        </member>
        <member name="M:Openfin.Desktop.CallbackSourcePair`1.getSource">
            <summary>
                Accessor for the stored source.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.CallbackSourcePair`1.getCallback">
            <summary>
                Accessor for the stored callback.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Openfin.Desktop.NamespaceDoc">
            <summary>
                C# API binding for the OpenFin App Desktop.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AckCallback">
            <summary>
                Delegate for receiving Ack's from AppDesktop
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnection">
            <summary>
                An object for launching, connecting to, and controlling AppDesktop.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopStateListener">
            <summary>
                A listener interface for receiving status updates from Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.Dispose">
            <summary>
                Terminates the connection to the AppDesktop when disposed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.#ctor(System.String,System.String,System.Int32,Openfin.Desktop.ExternalWindow)">
            <summary>
                Creates a new connection to AppDesktop
            </summary>
            <param name="uuid">A unique ID for AppDesktop to refer to this DesktopConnection</param>
            <param name="host">The host that AppDesktop is running on.</param>
            <param name="port">The port that AppDesktop is listening on for connections.</param>
            <param name="externalWindow">Interface to carry out this connection's window interaction</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.getInterApplicationBus">
            <summary>
                Gets the Inter-Application message dispatcher associated with 
                this DesktopConnection.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.removeEventCallback(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The object that originally registered the listener.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.addEventCallback(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.runDesktop(System.String,System.String)">
            <summary>
            Starts the AppDesktop executable.
            </summary>
            <param name="desktopPath">The file path that the AppDesktop executable is located in.</param>
            <param name="commandLine">Command line arguments to start the AppDesktop with.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.launchAndConnect(System.String,System.String,Openfin.Desktop.DesktopStateListener,System.Int32)">
            <summary>
                Launches AppDesktop and notifies the listener when connected.
            </summary>
            <param name="desktopPath">Absolute path to the AppDesktop executable
            </param>
            <param name="commandLineArguements">
                Command line arguments to start the AppDesktop with.
            </param>
            <param name="listener">
                Receives updates on startup and connection state.
            </param>
            <param name="timeout">
                For connecting to Desktop after launch. If the connection to 
                AppDesktop is not established by the timeout the listener 
                will get an onError() call.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.connect(Openfin.Desktop.DesktopStateListener,System.String)">
            <summary>
                Connects to an AppDesktop process
            </summary>
            
            <param name="listener">
                Receives updates on startup and connection state.
            </param>
            
            <param name="type">
                Describes the type of connection to establish.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.connectToDesktop(System.String,System.String,Openfin.Desktop.DesktopStateListener)">
            <summary>
                [Deprecated] Connects to an AppDesktop process
            </summary>
            <param name="authorizationToken">
                A token that is passed to Desktop on startup and then 
                re-presented on connect to establish elevated permissions for 
                this client.
            </param>
            <param name="type">
                Describes the type of connection to establish.
            </param>
            <param name="listener">
                Receives updates on startup and connection state.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.webSocketThreadMain">
                     * 
                     * ThreadStart for Websocket thread
                     * 
                    *
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.joinWebSocketThread">
            <summary>
                Joins the thread that handles the Websocket communication.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.websocketOpened(System.Object,System.EventArgs)">
            <summary>
                EventHandler for open event from websocket.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.websocketError(System.Object,SuperSocket.ClientEngine.ErrorEventArgs)">
             
             EventHandler for Error event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.websocketClosed(System.Object,System.EventArgs)">
             
             EventHandler for Close event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.registerNotificationCallbacks(Openfin.Desktop.NotificationOptions,System.Object)">
            <summary>
                Creates notifies AppDesktop to create a Notification.
            </summary>
            <param name="options">The options of the notification.</param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendActionToNotificationsCenter(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to an AppDesktop Notification.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with a resulting message instance of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.websocketMessageReceived(System.Object,WebSocket4Net.MessageReceivedEventArgs)">
             
             EventHandler for MessageReceived event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.processExternalAppAction(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Delegates API control from the desktop to a derived instance of ExternalWindow
            </summary>
            <param name="payload">The data to process</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.disconnect">
            <summary>
                Disconnects from AppDesktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.exit">
            <summary>
                Notify AppDesktop to exit.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.isConnected">
            <summary>
                Gets conneted status.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.respondToPing(System.Int64)">
             Responds to ping message from Desktop
            
             @param pingId unique ID of ping message
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.processExternalMessage(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Dispatches the a payload from "process-external-message" to all registered ExternalMessageHandlerDelegates
                and sends the result after all result handlers have set a success/fail result.
            </summary>
            <param name="payload">The data to process.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.addExternalMessageHandler(Openfin.Desktop.ExternalMessageHandlerDelegate,System.Object)">
            <summary>
                Registers a listener to handle messages for this connection's UUID originating via HTTPS/HTTP.
            </summary>
            <param name="listener">
                A function that is called to process a received HTTPS/HTTP message for this connection.
            </param>
            <param name="source">
                The object that originally registered the listener.
            </param>
        </member>
        <member name="P:Openfin.Desktop.DesktopConnection.MessageTrace">
            <summary>
                The MessageTrace property controls additional console logging.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnection.SendMessageToDesktopDelegate">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory">
            <summary>
                Creates instances of ExternalMessageResultHandler and sends the total result to the AppDesktop.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.IExternalMessageResultDispatcher">
            <summary>
                Interface for handling the result status and message from ExternalMessageResultHandler.send()
            </summary>
        </member>
        <member name="M:Openfin.Desktop.IExternalMessageResultDispatcher.handleResult(System.String,System.Boolean,System.String)">
            <summary>
                Invoked by ExternalMessageResultHandler.send()
            </summary>
            <param name="id">The UUID of the ExternalMessageResultHandler the result came from</param>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.#ctor(System.String,Openfin.Desktop.DesktopConnection.SendMessageToDesktopDelegate,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="uuid">
                The UUID of the DesktopConnection that owns this factory. Used for dispatching to the AppDesktop.
            </param>
            <param name="sendMessageToDesktop">
                Delegate for sending the success/fail result payload to the AppDesktop.
            </param>
            <param name="request">
                The payload from the AppDesktop.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.wasSent">
            <summary>
                Returns true when the result has been sent to the desktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.sendIfAllResultsDispatchedAndComplete">
            <summary>
                Sends the AND combination of all results and concatenated messages to the AppDesktop 
                if allDispatched() has been called and all result handlers have completed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.allDispatched">
            <summary>
                Marks that no more result handlers will be created.
                Sends result status to the AppDesktop immediately if all result handlers have already set their success/fail and messages.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.makeResultHandler">
            <summary>
                Factory method to create and track a result handler
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.handleResult(System.String,System.Boolean,System.String)">
            <summary>
                Updates the stored meta information and sends to the container if all results have been received.
            </summary>
            <param name="id">The UUID of the ExternalMessageResultHandler the result came from</param>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.ResultHandlerMetaInfo">
            <summary>
                Stores meta information for each ExternalMessageResultHandler
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.ExternalMessageResultHandlerFactory.ResultHandlerMetaInfo.#ctor">
            <summary>
                Defaults values used by this meta class
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopUtils">
            <summary>
                Static helper class for getting/setting values from a JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSON``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
                Generic function to retrieve a value identified by "key" from 
                "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONArray(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
                Returns a JArray identified by "key" from 
                "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve the JArray from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONString(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
                Returns a string identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONBool(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
                Returns a bool identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONInt(Newtonsoft.Json.Linq.JObject,System.String,System.Int32)">
            <summary>
                Returns an int identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONLong(Newtonsoft.Json.Linq.JObject,System.String,System.Int64)">
            <summary>
                Returns a long identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONDouble(Newtonsoft.Json.Linq.JObject,System.String,System.Double)">
            <summary>
                Returns a double identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONObject(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Returns a JObject identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getObject(Newtonsoft.Json.Linq.JObject,System.String,System.Object)">
            <summary>
                Returns an Object identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.updateJSONValue(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
                Sets a key/value pair for the passed JObject.
            </summary>
            <param name="jsonObject">The JSON object to insert the pair into.</param>
            <param name="key">The key to identify the value.</param>
            <param name="value">The value stored and identified by key.</param>
        </member>
        <member name="T:Openfin.Desktop.ExternalMessageHandlerDelegate">
            <summary>
                Delegate for consuming external messages targeted at an application originating from HTTP/HTTPS.
            </summary>
            <param name="resultHandler">Sends the result status to the container</param>
            <param name="payload">The JSON sent via HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.ExternalMessageResultHandler">
            <summary>
                Utility class to communicate results from calls to an ExternalMessageHandlerDelegate back to the AppDesktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalMessageResultHandler.Dispose">
            <summary>
                Will call send() if not done so already.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalMessageResultHandler.send(System.Boolean,System.String)">
            <summary>
                Record the result of an ExternalMessageHandlerDelegate to be sent back to the AppDesktop.
            </summary>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="P:Openfin.Desktop.ExternalMessageResultHandler.ID">
            <summary>
                A unique identifier for every instance of ExternalMessageResultHandler.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalWindowObserver">
            <summary>
                Integrates a window outside of the desktop for interaction and control with the API.
            </summary>
            <remarks>
                An integrated window is controlled in the same way as an HTML window running in the desktop. 
                It can be controlled and queried by the API,
                generate events that are subscribed to by addEventListener, 
                and join/merge groups with other windows for docking.
            </remarks>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.#ctor(System.String,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
                Establishes a connection and registers 
                the window identified by hWnd with the desktop.
            </summary>
            <param name="host">The host that the desktop is running on.</param>
            <param name="port">The port that the desktop is listening on for connections.</param>
            <param name="parentAppUuid">The UUID of the application to create register this window as a child of.</param>
            <param name="name">The unique name for this window as a child window.</param>
            <param name="hWnd">The HWND of the window to control/observe.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.restoreWndProc">
            <summary>
                Resets the normal WndProc.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.cleanup">
            <summary>
                deregisters the window with the desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.Dispose">
            <summary>
                Ensures this window is deregistered on disposal.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowFrameEnabled(Openfin.Desktop.Ack)">
            <summary>
                Triggered when a "frame-enabled" event is triggered for the registered external window.
            </summary>
            <param name="ack">Contains additional information provided by the AppDesktop</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowFrameDisabled(Openfin.Desktop.Ack)">
            <summary>
                Triggered when a "frame-disabled" event is triggered for the registered external window.
            </summary>
            <param name="ack">Contains additional information provided by the AppDesktop</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.registerExternalWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Notifies the desktop to track, control and observe events for this window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.deregisterExternalWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Notifies the desktop to stop all integration with this window, and remove it from the app.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.sendExternalWindowEvent(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Sends a serialized WM message as JSON to the desktop.
            </summary>
            <param name="payload">The serialized WM message</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.installMessageHandlers">
            <summary>
                Install delegates to send WM events to the desktop 
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onCaptureChanged(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_CAPTURECHANGED .
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_CAPTURECHANGED</param>
            <param name="wParam">
                This parameter is not used.
            </param>
            <param name="lParam">
                A handle to the window gaining the mouse capture.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onDestroyed(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_DESTROY.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_DESTROY</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onEnterSizeMove(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_ENTERSIZEMOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_ENTERSIZEMOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onExitSizeMove(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_EXITSIZEMOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_EXITSIZEMOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onKillFocus(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_KILLFOCUS.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_KILLFOCUS</param>
            <param name="wParam">A handle to the window that receives the keyboard focus. This parameter can be NULL.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMove(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_MOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_MOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                The x and y coordinates of the upper-left corner 
                of the client area of the window. The low-order word 
                contains the x-coordinate while the high-order 
                word contains the y coordinate.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMoving(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_MOVING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_MOVING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a RECT structure with the current 
                position of the window, in screen coordinates. 
                To change the position of the drag rectangle, 
                an application must change the members of 
                this structure.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onNcDoubleClick(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_NCLBUTTONDBLCLK.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_NCLBUTTONDBLCLK</param>
            <param name="wParam">
                The hit-test value returned by the DefWindowProc function 
                as a result of processing the WM_NCHITTEST message.
            </param>
            <param name="lParam">
                A POINTS structure that contains the x- and y-coordinates 
                of the cursor. The coordinates are relative to the upper-left 
                corner of the screen.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSetFocus(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_SETFOCUS.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SETFOCUS</param>
            <param name="wParam">
                A handle to the window that has lost the keyboard focus. 
                This parameter can be NULL.
            </param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSizing(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_SIZING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SIZING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSysCommand(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_SYSCOMMAND.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SYSCOMMAND</param>
            <param name="wParam">The type of system command requested.</param>
            <param name="lParam">
            
                The low-order word specifies the horizontal position of the cursor, 
                in screen coordinates, if a window menu command is chosen with the mouse. 
                Otherwise, this parameter is not used.
                
                The high-order word specifies the vertical position of the cursor, in s
                creen coordinates, if a window menu command is chosen with the mouse. 
                This parameter is –1 if the command is chosen using a 
                system accelerator, or zero if using a mnemonic.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowPosChanged(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_WINDOWPOSCHANGED.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_WINDOWPOSCHANGED</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a WINDOWPOS structure that contains 
                information about the window's new size and position.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowPosChanging(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
                Called in response to WM_WINDOWPOSCHANGING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_WINDOWPOSCHANGING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a WINDOWPOS structure that contains 
                information about the window's new size and position.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowObserver.UUID">
            <summary>
                The UUID property represents the UUID of 
                the application this window is a child of.
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowObserver.Name">
            <summary>
                The Name property represents the name for the window which 
                must be unique within the context of the invoking Application.
            </summary> 
        </member>
        <member name="T:Openfin.Desktop.ExternalWindowAckResult">
            <summary>
                Encapsulates and sends the result of an ExternalWindow action to the desktop.
                The result is sent after invocation of an ExternalWindow method.
                
                In cases where this behavior needs to be  prevented, such as when work done should be handled by another thread, 
                Set PreventAutomaticSend to true and call send() when the result state is determined.
                
                send() will be called automatically by Dispose() if it has not been explicitly called prior.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.#ctor(Openfin.Desktop.DesktopConnection,System.Int64,System.String)">
            <summary>
                 Constructs an instance.
            </summary>
            <param name="connection"> The websocket connection that owns this ACK</param>
            <param name="correlationId">The message ID to map this result back to any pending callbacks in other apps.</param>
            <param name="destinationToken">Token which resolves to the app with the pending callback.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.send(System.Boolean,System.String)">
            <summary>
                Sends the result to the desktop triggering pending callbacks in other apps.
            </summary>
            <param name="succeeded">True when the operation was successful</param>
            <param name="reason">When succeeded is false, a reason is sent on error.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.Dispose">
            <summary>
                Will call send() if not done so already.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowAckResult.PreventAutomaticSend">
            <summary>
                Prevents send() from being called directly after invocation of an ExternalWindow method. 
                If prevented send() must be called explicitly otherwise it will be called on Dispose().
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalWindow">
            <summary>
               Responds to API window messages to control a window outside of the desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.blur(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Removes focus from the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.bringToFront(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Brings the window to the front of the window stack.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.close(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Closes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.focus(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Gives focus to the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.hide(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Hides the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.maximize(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Maximizes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.minimize(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Minimizes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.moveBy(System.Int32,System.Int32,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Moves the window by a specified amount.
            </summary>
            <param name="deltaLeft">The change in the left position of the window.</param>
            <param name="deltaTop">The change in the top position of the window.</param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.moveTo(System.Int32,System.Int32,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Moves the window to a specified location.
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.resizeBy(System.Int32,System.Int32,System.String,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Resizes the window by the specified amount.
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.resizeTo(System.Int32,System.Int32,System.String,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.restore(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Restores the window to its normal state (i.e., unminimized, unmaximized).
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.show(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Shows the window if it is hidden.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.showAt(System.Int32,System.Int32,System.Boolean,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Shows the window if it is hidden at the specified location.
                <para>
                    If the toggle parameter is set to true, the window will
                    alternate between showing and hiding.
                </para>
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The right position of the window.</param>
            <param name="toggle">
                If true, the window will alternate between showing and hiding in subsequent calls.
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.setAsForeground(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Set's the window as the foreground window. 
                <para>
                    The window is activated(focused) and brought to front.
                </para>
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="T:Openfin.Desktop.InterAppMessageHandler">
            <summary>
                A delegate that handles all sent/published messages.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.InterAppSubscriptionListener">
            <summary>
                A delegate that handles (un)subscription events on a 
                DesktopConnection's InterApplicationBus.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.InterApplicationBus">
            <summary>
                A messaging bus that allows for pub / sub messaging between different applications.
                Available via getInterApplicationBus() method on DesktopConnection
            </summary>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.#ctor(Openfin.Desktop.DesktopConnection)">
            <summary>InterApplicationBus Constructor</summary>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.addSubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Registers a listener which is called whenever a subscription occurs.
            </summary>
            <param name="listener">
                A function that is called whenever a subscription occurs.
                It is passed the topic and application UUID that trigered the event.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.addUnsubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Registers a listener which is called whenever an unsubscription occurs.
            </summary>
            <param name="listener">
                A function that is called whenever a unsubscription occurs.
                It is passed the topic and application UUID that trigered the event.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchMessageToCallbacks(System.String,System.String,System.Object)">
            <summary>
                Dispatches a messages to listeners
            </summary>
            <param name="sourceUuid">UUID of the application from which messages are sent.</param>
            <param name="topic">Topic to which the mssage is published.</param>
            <param name="message">The JSON message to be dispatched</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchToSubscribeListeners(System.String,System.String)">
            <summary>
                Dispatches to subscription listeners
            </summary>
            <param name="uuid">The subscribing application.</param>
            <param name="topic">The topic that was subscribed to.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchToUnsubscribeListeners(System.String,System.String)">
            <summary>
                Dispatches to unsubscription listeners
            </summary>
            <param name="uuid">The unsubscribing application.</param>
            <param name="topic">The topic that was unsubscribed from.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.getCallbackList(System.String,System.String)">
            <summary>
                Retrieves the callback list associated with the passed UUID and topic.
                <para>This method inserts empty entries if none are found.</para>
            </summary>
            <param name="uuid">The application from which messages are communicated with.</param>
            <param name="topic">The topic that is being communicated on.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.publish(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Publishes a message to a topic
            </summary>
            <param name="topic">The topic to which the message is published.</param>
            <param name="message">the JSON message to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.removeSubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Removes the passed listener. 
                It is no longer called for subscription events.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.removeUnsubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Removes the passed listener. 
                It is no longer called for unsubscription events.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.send(System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Sends a message to an application
            </summary>
            <param name="destinationUuid">UUID of the application from which messages are sent.</param>
            <param name="topic">The topic to which the message is published.</param>
            <param name="message">The JSON message to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.subscribe(System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Subscribes to messages on the specified topic
            </summary>
            <param name="senderUuid">UUID of the application</param>
            <param name="topic">The topic to be subscribed to.</param>
            <param name="listener">
                The listener that is to be passed messages on the specified topic
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.unsubscribe(System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Unsubscribes to messages on the specified topic.
            </summary>
            <param name="sourceUuid">UUID of the application from which messages are sent.</param>
            <param name="topic">The topic to be unsubscribed from.</param>
            <param name="listener">
                The listener that will be removed and no longer passed messages on the topic.
            </param>
        </member>
        <member name="T:Openfin.Desktop.Notification">
            <summary>
                A Notification represents a window on App Desktop which is shown briefly 
                to the user on the bottom-right corner of the primary monitor. 
                <para>
                    A notification is typically used to alert the user of some important event 
                    which requires his or her attention.
                </para>
            </summary>
            <remarks>
                Multiple notifications can be generated at once but will queue if more 
                than 5 are already displayed. Notifications can be dismissed by dragging 
                them to the right with the mouse and can communicate securely with their 
                invoking applications.
            </remarks>
        </member>
        <member name="M:Openfin.Desktop.Notification.#ctor(Openfin.Desktop.NotificationOptions,Openfin.Desktop.DesktopConnection,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Notification Constructor.
            </summary>
            <param name="options">The options of the notification.<see cref="T:Openfin.Desktop.NotificationOptions"/></param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
            <param name="callback">A function that is called if the method succeeds.</param>
            <param name="errorCallback">
                A function that is called if the method fails. 
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Notification.close(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Closes the notification.
            </summary>
            <param name="callback">A function that is called if the method succeeds.</param>
            <param name="errorCallback">
                A function that is called if the method fails. 
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Notification.sendMessage(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Sends a message to the notification.
            </summary>
            <param name="message">The JSON message to be sent to the notification.</param>
            <param name="callback">A function that is called if the method succeeds.</param>
            <param name="errorCallback">
                A function that is called if the method fails. 
                The reason for failure is passed as an argument.
            </param>
            
        </member>
        <member name="M:Openfin.Desktop.Notification.sendMessageToApplication(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Sends a message from the notification to the application that 
                created the notification. The message is handled by the 
                notification's onMessage callback.
            </summary>
            <param name="message">The JSON message to be sent to the notification.</param>
            <param name="callback">A function that is called if the method succeeds.</param>
            <param name="errorCallback">
                A function that is called if the method fails. 
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="T:Openfin.Desktop.NotificationOptions">
            <summary>
                Helper object that provides getters/setters for the 
                various options needed for creating a Notification.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.NotificationOptions.#ctor(System.String)">
            <summary>
                Constructs an instance with URL set.
            </summary>
            <param name="url">The url to set in the underlying JObject.</param>
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.URL">
            <summary>
                The URL property represents the The URL of the notification.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The URL property gets the value of the underlying 
                JObject field, "url".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.Message">
            <summary>
                The Message property represents a message to be passed to the 
                Notification upon creation.
                <para>Default: null</para>
            </summary> 
            <value>
                The Message property gets the value of the underlying 
                JObject field, "message".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnClick">
            <summary>
                The OnClick property represents a function that is called when
                a Notification is clicked.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnClick property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnClose">
            <summary>
                The OnClose property represents a function that is called when
                a Notification is closed.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnClose property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnDismiss">
            <summary>
                The OnDismiss property represents a function that is called when 
                a Notification is dismissed by swiping to the right.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnDismiss property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnError">
            <summary>
                The OnError property represents a function that is called when 
                an error occurs. The reason for the error is passed as an 
                argument.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnError property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnMessage">
            <summary>
                The OnMessage property represents a function that is called
                whenever a notification sends a message.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnMessage property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.OnShow">
            <summary>
                The OnShow property represents a function that is called when
                a Notification is shown.
                <para>Default: null</para>
            </summary> 
            <value>
                The OnShow property gets the sored AckCallback.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.NotificationOptions.Timeout">
            <summary>
                The Timeout property represents the time for which a
                notification is displayed in milliseconds.
                <para>
                    When set to -1 the notification will remain until 
                    explicitly closed by the API or user.
                </para>
                <para>Default: 3000</para>
            </summary> 
            <value>
                The Timeout property gets the value of the underlying 
                JObject field, "timeout".
            </value> 
        </member>
        <member name="T:Openfin.Desktop.LaunchExternalProcessResult">
            <summary>
                Encapsulates the result from a call to DesktopSystem.launchExternalProcess()
            </summary>
        </member>
        <member name="P:Openfin.Desktop.LaunchExternalProcessResult.UUID">
            <summary>
                The UUID property represents the mapped UUID for a process launched by DesktopSystem.launchExternalProcess()
                <para>Default: An empty string</para>
            </summary> 
        </member>
        <member name="T:Openfin.Desktop.launchExternalProcessHandler">
            <summary>
                A delegate which receives a mapped process UUID from DesktopSystem.launchExternalProcess()
            </summary>
            <param name="result">Contains the resulting mapped UUID.</param>
        </member>
        <member name="T:Openfin.Desktop.TerminateExternalProcessResult">
            <summary>
                Encapsulates the result from a call to DesktopSystem.terminateExternalProcess().
                The result of the close/terminate can be retrieved by the getter named "Result".
            </summary>
        </member>
        <member name="P:Openfin.Desktop.TerminateExternalProcessResult.UUID">
            <summary>
                The UUID property represents the mapped UUID for a process launched by DesktopSystem.launchExternalProcess()
                <para>Default: An empty string</para>
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.TerminateExternalProcessResult.Result">
            <summary>
                The Result property represents how a process termination was handleded.
                
                <para>"clean": The process was closed.</para>
                
                <para>"terminated": The was terminated.</para>
                
                <para>"failed": The close/terminate operation was unable to complete.</para>
            
            
            
                <para>Default: "failed"</para>
            </summary> 
        </member>
        <member name="T:Openfin.Desktop.terminateExternalProcessHandler">
            <summary>
                A delegate which is passed the resulting status of a process after DesktopSystem.terminateExternalProcess() has completed.
            </summary>
            <param name="result">Contains the status of the prorcess after the operation has completed.</param>
        </member>
        <member name="T:Openfin.Desktop.DesktopSystem">
            <summary>
                An object representing the core of the OpenFin Desktop. Allows the developer to 
                perform system-level actions, such as accessing logs, viewing processes, clearing 
                the cache and exiting the Desktop.
                <para>
                    In order to use the System object, an application must have admin-level privileges 
                    (e.g., isAdmin must be set to true when in the options when the application is created). 
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.#ctor(Openfin.Desktop.DesktopConnection)">
            <summary>
                DesktopSystem Constructor.
            </summary>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.addEventListener(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                    deskband-icon-clicked
                    desktop-icon-clicked
                    monitor-info-changed
            </remarks>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                    deskband-icon-clicked
                    desktop-icon-clicked
                    monitor-info-changed
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.clearCache(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Clears cached data containing window state/positions, 
                application resource files (images, HTML, JavaScript files)
                cookies, and items stored in the Local Storage. 
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="cache">If true, clears chrome caches</param>
            <param name="cookies">If true, deletes all cookies.</param>
            <param name="appcache">If true, clear application caches.</param>
            <param name="localStorage">If true, clears local storage.</param>
            <param name="userData">If true, clears user data.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.deleteCacheOnRestart(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Clears all cached data when App Desktop is restarted. 
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.exit(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Exits App Desktop.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getAllApplications(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data (uuid, running/active state) for all application windows. 
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The object passed to callback takes the form:
                [
                    {
                        uuid: (string) uuid of the application,
                        isRunning: (bool) true when the application is running/active
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed an array containing the application UUIDs and running state.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getAllWindows(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data (name, ids, bounds) for all application windows. 
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The object passed to callback takes the form:
                [
                    {
                        uuid: (string) uuid of the application,
                        mainWindow: {
                            name: (string) name of the main window,
                            top: (integer) top-most coordinate of the main window,
                            right: (integer) right-most coordinate of the main window,
                            bottom: (integer) bottom-most coordinate of the main window,
                            left: (integer) left-most coordinate of the main window
                        },
                        childWindows: [{
                                name: (string) name of the child window,
                                top: (integer) top-most coordinate of the child window,
                                right: (integer) right-most coordinate of the child window,
                                bottom: (integer) bottom-most coordinate of the child window,
                                left: (integer) left-most coordinate of the child window
                            },
                            ...
                        ]
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed an array containing the window information.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getCommandLineArguments(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the command line argument string that started App Desktop.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called and passed the command 
                line arguments used to start App Desktop.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getConfig(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the App Desktop's configuration.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="section">Which section to return from the configuration.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getDeviceId(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the UUID of the computer on which App Desktop is installed.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                 A function that is called and passed a unique identifier of the device.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getLog(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the contents of the log with the specified filename.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="fileName">The filename of the log.</param>
            <param name="callback">
                 A function that is called and passed the contents of the log.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getLogList(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data objects for all available logs.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                Each object in the returned array takes the form:
                 {
                     name: (string) the filename of the log,
                     size: (integer) the size of the log in bytes,
                     date: (integer) the unix time at which the log was created
                 }
            </remarks>
            <param name="callback">
                 A function that is called and passed an array of data objects for all available logs.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getMonitorInfo(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an object that contains data about the about the 
                monitor setup of the computer that App Desktop is running on.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The returned object takes the form:
                {
                    nonPrimaryMonitors: [{
                        availableRect: {
                            bottom: (integer) bottom-most available monitor coordinate,
                            left: (integer) left-most available monitor coordinate,
                            right: (integer) right-most available monitor coordinate,
                            top: (integer) top-most available monitor coordinate
                        },
                        deviceId: (string) device id of the display,
                        displayDeviceActive: (boolean) true if the display is active,
                        monitorRect: {
                            bottom: (integer) bottom-most monitor coordinate,
                            left: (integer) left-most monitor coordinate,
                            right: (integer) right-most monitor coordinate,
                            top: (integer) top-most monitor coordinate
                        },
                        name: (string) name of the display
                    },
                    ...
                    ],
                    primaryMonitor: {
                        availableRect: {
                            bottom: (integer) bottom-most available monitor coordinate,
                            left: (integer) left-most available monitor coordinate,
                            right: (integer) right-most available monitor coordinate,
                            top: (integer) top-most available monitor coordinate
                        },
                        deviceId: (string) device id of the display,
                        displayDeviceActive: (boolean) true if the display is active,
                        monitorRect: {
                            bottom: (integer) bottom-most monitor coordinate,
                            left: (integer) left-most monitor coordinate,
                            right: (integer) right-most monitor coordinate,
                            top: (integer) top-most monitor coordinate
                        },
                        name: (string) name of the display
                    },
                    reason: (string) always "api-query",
                    taskbar: {
                        edge: {string} which edge of a monitor the taskbar is on,
                        rect: {
                            bottom: ({integer} bottom-most coordinate of the taskbar),
                            left: ({integer} left-most coordinate of the taskbar),
                            right: ({integer} right-most coordinate of the taskbar),
                            top: ({integer} top-most coordinate of the taskbar)
                        }
                    },
                    virtualScreen: {
                        bottom: (integer) bottom-most coordinate of the virtual screen,
                        left: (integer) left-most coordinate of the virtual screen,
                        right: (integer) right-most coordinate of the virtual screen,
                        top: (integer) top-most coordinate of the virtual screen
                    }
                }
            </remarks>
            <param name="callback">
                A function that is called and passed an object containing monitor information
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getMousePosition(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the mouse in virtual screen coordinates (left, top).
            </summary>
            <remarks>
                The returned object takes the form:
                {
                    top: (integer) the top position of the mouse in virtual screen
                                   coordinates,
                    left: (integer) the left position of the mouse in virtual screen
                                    coordinates
                }
            </remarks>
            <param name="callback">
                A function that is called and passed an object containing the position of the mouse.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getProcessList(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of all App Desktop processes that are currently running.
                <para>
                    Each element in the array is an object containing the uuid 
                    and the name of the application to which the process belongs. 
                </para>
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The returned object takes the form:
                [
                    {
                        cpuUsage: (decimal) the percentage of total CPU usage,
                        name: (string) the application name,
                        nonPagedPoolUsage: (integer) the current nonpaged pool usage in bytes,
                        pageFaultCount: (integer) the number of page faults,
                        pagedPoolUsage: (integer) the current paged pool usage in bytes,
                        pagefileUsage: (integer) the total amount of memory in bytes that the
                                                 memory manager has committed,
                        peakNonPagedPoolUsage: (integer) the peak nonpaged pool usage in bytes,
                        peakPagedPoolUsage: (integer) the peak paged pool usage in bytes,
                        peakPagefileUsage: (integer) the peak value in bytes of pagefileUsage
                                                     during the lifetime of this process,
                        peakWorkingSetSize: (integer) the peak working set size in bytes,
                        processId: (integer) the native process identifier,
                        uuid: (string) the application UUID,
                        workingSetSize: (integer) the current working set size
                                                  (both shared and private data) in bytes
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed the process list.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getProxySettings(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the proxy settings object.
            </summary>
            <remarks>
                The proxy object the callback receives takes the following form:
                {
                    type: (string) "system" or "named",
                    proxyAddress: (string) the address of the proxy server,
                    proxyPort: (integer) the port of proxy server
                }
            </remarks>
            <param name="callback">
                A function that is called and passed the proxy settings object.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getVersion(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the version of App Desktop.
                <para>
                    The version contains the major, minor, build and revision numbers (e.g., "2.0.3.0").
                </para>
            </summary>
            <param name="callback">
                A function that is called and passed the App Desktop version.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.hideStartWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Hides the start menu window.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.installDeskbandIcon(System.String,System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Installs a start icon in the Windows Deskband.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="enabledIcon">URL of icon when app is enabled.</param>
            <param name="disabledIcon">URL of icon when app is disabled.</param>
            <param name="hoverIcon">URL of icon for hover over.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.installStartIcon(System.String,System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Installs a start icon in the notification tray.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="enabledIcon">URL of icon when app is enabled.</param>
            <param name="disabledIcon">URL of icon when app is disabled.</param>
            <param name="hoverIcon">URL of icon for hover over.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.launchExternalProcess(System.String,System.String,Openfin.Desktop.launchExternalProcessHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Runs an executable or batch file.
            </summary>
            <param name="path">The path of the file to launch via the command line.</param>
            <param name="commandLine">The command line arguments to pass.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds. 
                Receives a LaunchExternalProcessResult containing the UUID mapping to the launched process.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.log(System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Writes a message to the log.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="level">
                The log level for the entry. Can be either "info", "warning" or "error".
            </param>
            <param name="message">
                The log message text.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.openUrlWithBrowser(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Opens the passed URL
            </summary>
            <param name="url">The URL of the page to open.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.releaseExternalProcess(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes the process entry for the passed UUID obtained 
                from a previous call to DesktopSystem.launchExternalProcess().
            </summary>
            <param name="processUuid">The UUID for a process launched by DesktopSystem.launchExternalProcess()</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.removeDeskbandIcon(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a start icon from the Windows Deskband.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                     deskband-icon-clicked
                     desktop-icon-clicked
                     monitor-info-changed
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.removeStartIcon(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a start icon from the notification tray.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.setClipboard(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Copies text to the clipboard
            </summary>
            <param name="text">The text to copy</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.showDeveloperTools(System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows Developer tool
            </summary>
            <param name="applicationUUID">The application ID</param>
            <param name="windowName">The name of dev tool window</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.showStartWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows Shows the start menu window.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.terminateExternalProcess(System.String,System.UInt32,System.Boolean,Openfin.Desktop.terminateExternalProcessHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Attempts to cleanly close an external process and terminates it 
                if the close has not occured after the elapsed timeout in milliseconds.
            </summary>
            <param name="processUuid">The UUID for a process launched by DesktopSystem.launchExternalProcess()</param>
            <param name="timeout">The time in milliseconds to wait for a close to occur before terminating.</param>
            <param name="killTree">Explicitly terminates all child processes when true.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds. 
                The result of the operation is returned as a TerminateExternalProcessResult
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.updateProxySettings(System.String,System.String,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Updates the proxy settings.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                the passed type can be either "system" or "named". 
                Use "system" to use the default system proxy settings. 
                Otherwise use "named" to specify the address and port 
                of the proxy server.
            </remarks>
            <param name="type">The type of proxy. </param>
            <param name="proxyAddress">
                The address of the proxy. Example: "example.yourproxyserver.com".
            </param>
            <param name="proxyPort">The port of the proxy server.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="T:Openfin.Desktop.windowOptionsHandler">
            <summary>
                A delegate to handle the resulting options from 
                Window.getOptions().
            </summary>
            <param name="options">The options as returned by the desktop</param>
        </member>
        <member name="T:Openfin.Desktop.windowGroupHandler">
            <summary>
                A delegate to handle the returned grouped windows, if any, from Window.getGroup()
            </summary>
            
            <remarks>
                An empty list is returned if the window is not in a group. 
                The calling window is included in the resulting List.
            </remarks>
            <param name="group">A list of all the wrapped windows in the same group.</param>
        </member>
        <member name="T:Openfin.Desktop.Window">
            <summary>
                A window that can be controlled by the AppDesktop API. 
                <para>
                    Window objects are available through application.getWindow(). 
                    This class can not be instantiated directly. 
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.#ctor(Openfin.Desktop.Application)">
            <summary>
                Window Constructor.
            </summary>
            <param name="application">the parent Application<see cref="T:Openfin.Desktop.Application"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.#ctor(System.String,System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches a Window object to an application Window that already exists.
                <seealso cref="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)"/>
            </summary>
            <param name="applicationUUID">The UUID of the parent Application.</param>
            <param name="name">The name of the Window</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.wrap(System.String,System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches a Window object to an application Window that already exists.
            </summary>
            <param name="applicationUUID">The UUID of the parent Application.</param>
            <param name="windowName">The name of the Window</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.getUuid">
            <summary>
                Returns the parent Application's UUID.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getName">
            <summary>
                Returns the name of the window As registered with the AppDesktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.initialize">
            <summary>
                Allocates and prepares internal JObjects.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.addEventListener(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                    blurred
                    bounds-changed
                    bounds-changing
                    closed
                    close-requested
                    disabled-frame-bounds-changed
                    disabled-frame-bounds-changing
                    focused
                    frame-disabled
                    frame-enabled
                    group-changed
                    hidden
                    maximized
                    minimized
                    restored
                    shown
            </remarks>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <remarks>
                Supported system event types are:
                    blurred
                    bounds-changed
                    bounds-changing
                    closed
                    focused
                    maximized
                    minimized
                    restored
            </remarks>
            <param name="type">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.adoptWindow(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Reparents the passed HWND with the current AppDesktop window.
            </summary>
            <param name="hwnd">The window handle to reparent.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.animate(Openfin.Desktop.AnimationTransitions,Openfin.Desktop.AnimationOptions,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Performs the specified window transitions.
            </summary>
            <param name="transitions">
                Describes the animations to preform.
                <see cref="T:Openfin.Desktop.AnimationTransitions"/>
            </param>
            <param name="options">
                Options for the animation.
            <see cref="T:Openfin.Desktop.AnimationOptions"/>
            </param>
            <param name="callback">
                (Optional) A function that is called once all transitions have been completed or interrupted.
                The result state is passed as an object.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            
        </member>
        <member name="M:Openfin.Desktop.Window.blur(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes focus from the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.bringToFront(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Brings the window to the front of the window stack.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.close(System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Closes the window.
            </summary>
            <param name="force">
                When true the close can not be prevented through the window event 'close-requested'
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.disableFrame(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Prevents a user from changing a window's size/position when using the window's frame.
                
            <remarks>
                'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation. 
                'disabled-frame-bounds-changed' is generated after a user move/size operation.
                The events provide the bounds that would have been applied if the frame was enabled.
             
                'frame-enabled' is generated when a disabled frame has becomes enabled.
            </remarks>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.enableFrame(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Re-enables user changes to a window's size/position when using the window's frame.
                
            <remarks>
                'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation. 
                'disabled-frame-bounds-changed' is generated after a user move/size operation.
                 The events provide the bounds that would have been applied if the frame was enabled.
                 
                'frame-enabled' is generated when a disabled frame has becomes enabled.
            </remarks>
            
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.flash(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Draws attention to the window by flashing the taskbar and window caption.
                <para>This effect continues until the window receives focus.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.focus(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gives focus to the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getBounds(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the current bounds (top, left, width, height) of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getGroup(Openfin.Desktop.windowGroupHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of wrapped windows in the same group.
            </summary>
            <remarks>
                An empty list is returned if the window is not in a group. 
                The calling window is included in the resulting List.
            </remarks>
            <param name="groupHandler">
                A delegate that receives a list of wrapped windows in the same group.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getOptions(Openfin.Desktop.windowOptionsHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the current options as stored in the desktop.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getParentApplication">
            <summary>
                Returns the wrapped application that this window belongs to.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getParentWindow">
            <summary>
                Returns the wrapped main window of the application that this window belongs to.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getSnapshot(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets a base64 encoded PNG snapshot of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getState(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the current state ("minimized", "maximized", or "restored") of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.hide(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Hides the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.isShowing(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Determines if the window is currently showing.
            </summary>
            <param name="callback">
                A function that is called if the method succeeds and 
                passed an object containg the visiblity of the window.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.joinGroup(Openfin.Desktop.Window,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Joins the same window group as the specified window. 
            </summary>
            <remarks>
                When windows are joined, if the user moves one of the windows, 
                all other windows in the same group move too. This function is 
                to be used when docking to other windows. If the window is 
                already within a group, it will leave that group to join the 
                new one. Windows must be owned by the same application in order 
                to be joined.
            </remarks>
            <param name="target">The window whose group is to be joined.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.leaveGroup(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Leaves the current window group so that the window 
                can be move independently of those in the group.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.maximize(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Maximizes the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.mergeGroups(Openfin.Desktop.Window,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Merges the instance's window group with the same window group as the specified window.
            </summary>
            <remarks>
               When windows are joined, if the user moves one of the windows, 
               all other windows in the same group move too. This function is 
               to be used when docking to other windows. If the window is 
               already within a group, The two groups are joined to create a 
               new one. Windows must be owned by the same application in order 
               to be joined.
            </remarks>
            <param name="target">The window whose group is to be merged.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.minimize(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Minimizes the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.moveBy(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Moves the window by a specified amount.
            </summary>
            <param name="deltaLeft">The change in the left position of the window.</param>
            <param name="deltaTop">The change in the top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.moveTo(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Moves the window to a specified location.
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.orphanWindow(System.String,System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Unparents the window identified by HWND and moves it to left, top.
            </summary>
            <param name="hwnd">The child window handle to orphan and move.</param>
            <param name="left">The new left position of the window.</param>
            <param name="top">The new top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                    blurred
                    bounds-changed
                    bounds-changing
                    closed
                    close-requested
                    disabled-frame-bounds-changed
                    disabled-frame-bounds-changing
                    focused
                    frame-disabled
                    frame-enabled
                    group-changed
                    hidden
                    maximized
                    minimized
                    restored
                    shown
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeBy(System.Int32,System.Int32,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window by the specified amount.
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeBy(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window by the specified amount with a "top-left" anchor
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeTo(System.Int32,System.Int32,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeTo(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window to the specified dimensions with a "top-left" anchor.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.restore(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Restores the window to its normal state (i.e., unminimized, unmaximized).
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.show(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows the window if it is hidden.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.showAt(System.Int32,System.Int32,System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows the window if it is hidden at the specified location.
                <para>
                    If the toggle parameter is set to true, the window will
                    alternate between showing and hiding.
                </para>
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The right position of the window.</param>
            <param name="toggle">
                If true, the window will alternate between showing and hiding in subsequent calls.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.setAsForeground(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Set's the window as the foreground window. 
                <para>
                    The window is activated(focused) and brought to front.
                </para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.setBounds(System.Int32,System.Int32,System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Set's the bounds (top, left, width, height) of the window. 
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.updateOptions(Openfin.Desktop.WindowOptions,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Changes a window's options that were defined upon creation.
            </summary>
            <param name="options">The window options to change<seealso cref="T:Openfin.Desktop.WindowOptions"/></param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="T:Openfin.Desktop.Window.GroupChangedPayload">
            <summary>
                Helper struct representing the payload returned by the window event 'group-changed'
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.memberOf">
            <summary>
                Which group array the window that the event listener was 
                registered on is included in.
            </summary> 
            <remarks>
                'source'  The window is included in sourceGroup
                'target'  The window is included in targetGroup
                'nothing' The window is not included in sourceGroup nor targetGroup,
            </remarks>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.name">
            <summary>
                The name of the window
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.reason">
            <summary>
                The reason this event was triggered.
            </summary>
            <remarks>
                'leave'   A window has left the group due to a leave or merge with group.
                'join'    A window has joined the group.
                'merge'   Two groups have been merged together.
                'disband' There are no other windows in the group
            </remarks>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceGroup">
            <summary>
                All the windows in the group the sourceWindow originated from
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceWindowAppUuid">
            <summary>
                The UUID of the application the sourceWindow belongs to. 
                The source window is the window in which (merge/join/leave)group(s) was called.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceWindowName">
            <summary>
                the name of the sourcewindow. The source window is 
                the window in which (merge/join/leave)group(s) was called.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetGroup">
            <summary>
                All the windows in the group the targetWindow orginated from.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetWindowAppUuid">
            <summary>
                The UUID of the application the targetWindow belongs to. 
                The target window is the window that was passed into (merge/join)group(s).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetWindowName">
            <summary>
                The name of the targetWindow. 
                The target window is the window that was passed into (merge/join)group(s)
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.uuid">
            <summary>
                The UUID of the application the window belongs to
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.GroupChangedPayload.#ctor(Openfin.Desktop.Ack,Openfin.Desktop.DesktopConnection)">
            <summary>
                Populates values from the ACK of a window 'group-changed' payload
            </summary>
            <param name="payload">The payload of a 'group-changed' event handler<see cref="T:Openfin.Desktop.Ack"/></param>
            <param name="connection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="T:Openfin.Desktop.WindowOptions">
            <summary>
                A class representing the options for a Window.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.#ctor">
            <summary>
                Constructs an instance with a new underliying JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Constructs an instance with the passed options.
            </summary>
            <param name="options">a JObject containing window settings.</param>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.#ctor(System.String)">
            <summary>
                Constructs an instance with a new underliying JObject.
            </summary>
            <param name="name">The windows name</param>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.getJsonCopy">
            <summary>
                Gets all settings in JObject format.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Raw">
            <summary>
                Gets the underliying JObject containing the options.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Name">
            <summary>
                The Name property represents the name for the window which 
                must be unique within the context of the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Name property gets/sets the value of the underlying 
                JObject field, "name".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AlwaysOnBottom">
            <summary>
                The AlwaysOnBottom property represents a flag to always position 
                the window at the bottom of the window stack.
                <para>Default: false</para>
            </summary> 
            <value>
                The AlwaysOnBottom property gets/sets the value of the 
                underlying JObject field, "alwaysOnBottom".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AlwaysOnTop">
            <summary>
                The AlwaysOnTop property represents a flag to always position 
                the window at the top of the window stack.  
                <para>Default: false</para>
            </summary> 
            <value>
                The AlwaysOnTop property gets/sets the value of the 
                underlying JObject field, "alwaysOnTop".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AutoShow">
            <summary>
                The AutoShow property represents a flag to automatically 
                show the Window when it is created.
                <para>Default: false</para>
            </summary> 
            <value>
                The AutoShow property gets/sets the value of the 
                underlying JObject field, "autoShow".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ContextMenu">
            <summary>
                The ContextMenu property represents a flag to show the 
                context menu when right-clicking on a window.
                <para>Gives access to the Developer Console for the Window.</para>
                <para>Default: false</para>
            </summary> 
            <value>
                The ContextMenu property gets/sets the value of the 
                underlying JObject field, "contextMenu".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.CornerRoundingHeight">
            <summary>
                The CornerRoundingHeight property represents the rounded 
                corners height to apply.
                <para>Default: 0</para>
            </summary> 
            <value>
                The CornerRoundingHeight property gets/sets the value of the 
                underlying JObject field, "cornerRounding.height".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.CornerRoundingWidth">
            <summary>
                The CornerRoundingWidth property represents the rounded 
                corners width to apply.
                <para>Default: 0</para>
            </summary> 
            <value>
                The CornerRoundingWidth property gets/sets the value of the 
                underlying JObject field, "cornerRounding.width".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultCentered">
             <summary>
                 The DefaultCentered property specifies that the window will be positioned in the 
                 center of the primary monitor when loaded for the first time on a machine. 
            
                 <para>Default: false</para>
             </summary> 
             <remarks>
                 When the window corresponding to that id is loaded again, the position 
                 from before the window was closed is used.
             </remarks>
             <value>
                 The DefaultCentered property gets/sets the value of the 
                 underlying JObject field, "defaultCentered".
             </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultHeight">
            <summary>
                The DefaultHeight property represents the window's 
                default height in pixels.
                <para>Default: 500</para>
            </summary> 
            <remarks>
                Specifies the height of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the height is taken to be the 
                last height of the window before it was closed.
            </remarks>
            <value>
                The DefaultHeight property gets/sets the value of the 
                underlying JObject field, "defaultHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultLeft">
            <summary>
                The DefaultLeft property represents the window's 
                default left position.
                <para>Default: 100</para>
            </summary> 
            <remarks>
                Specifies the left position of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the value of left is 
                taken to be the last value before the window was closed.
            </remarks>
            <value>
                The DefaultLeft property gets/sets the value of the 
                underlying JObject field, "defaultLeft".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultTop">
            <summary>
                The DefaultTop property represents the window's 
                default top position.
                <para>Default: 100</para>
            </summary> 
            <remarks>
                Specifies the top position of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the value of top is 
                taken to be the last value before the window was closed.
            </remarks>
            <value>
                The DefaultTop property gets/sets the value of the 
                underlying JObject field, "defaultTop".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultWidth">
            <summary>
                The DefaultWidth property represents the window's 
                default width in pixels.
                <para>Default: 800</para>
            </summary> 
            <remarks>
                Specifies the width of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the height is taken to be the 
                last width of the window before it was closed.
            </remarks>
            <value>
                The DefaultWidth property gets/sets the value of the 
                underlying JObject field, "defaultWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Draggable">
            <summary>
                The Draggable property represents a flag to allow 
                the user to drag the window by its client area. 
                <para>Default: false</para>
            </summary> 
            <value>
                The Draggable property gets/sets the value of the 
                underlying JObject field, "draggable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Frame">
            <summary>
                The Frame property represents a flag to show the frame. 
                <para>Default: true</para>
            </summary> 
            <value>
                The Frame property gets/sets the value of the 
                underlying JObject field, "frame".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.HideOnClose">
            <summary>
                The HideOnClose property represents a flag to allow a window 
                to be hidden when the close button is clicked.
                <para>Default: false</para>
            </summary> 
            <value>
                The HideOnClose property gets/sets the value of the 
                underlying JObject field, "hideOnClose".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MaxHeight">
            <summary>
                The MaxHeight property represents the maximum height of a window.
                <para>Will default to the OS defined value if set to -1.</para>
                <para>Default: -1</para>
            </summary> 
            <value>
                The MaxHeight property gets/sets the value of the 
                underlying JObject field, "maxHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Maximizable">
            <summary>
                The Maximizable property represents a flag that lets the window be maximized.
                <para>Default: true</para>
            </summary> 
            <value>
                The Maximizable property gets/sets the value of the 
                underlying JObject field, "maximizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MaxWidth">
            <summary>
                The MaxWidth property represents the maximum width  of a window.
                <para>Will default to the OS defined value if set to -1.</para>
                <para>Default: -1</para>
            </summary> 
            <value>
                The MaxWidth property gets/sets the value of the 
                underlying JObject field, "maxWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MinHeight">
            <summary>
                The MinHeight property represents the minimum height of a window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The MinHeight property gets/sets the value of the 
                underlying JObject field, "minHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Minimizable">
            <summary>
                The Minimizable property represents a flag that lets the window be minimized.
                <para>Default: true</para>
            </summary> 
            <value>
                The Minimizable property gets/sets the value of the 
                underlying JObject field, "minimizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MinWidth">
            <summary>
                The MinWidth property represents the minimum width of a window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The MinWidth property gets/sets the value of the 
                underlying JObject field, "minWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Opacity">
            <summary>
                The Opacity property represents a flag that specifies 
                how transparent the window will be.
                <para>Default: 1.0</para>
            </summary> 
            <value>
                The Opacity property gets/sets the value of the 
                underlying JObject field, "opacity".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Resizable">
            <summary>
                The Resizable property represents a flag which allows 
                the user to resize the window.
                <para>This property will be deprecated in a future release.</para>
                <para>Default: true</para>
            </summary> 
            <value>
                The Resizable property gets/sets the value of the 
                underlying JObject field, "resizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ResizeRegionBottomRightCorner">
            <summary>
                The ResizeRegionBottomRightCorner property defines an additional square 
                region located at the bottom right corner of a frameless window.
                <para>Default: 4</para>
            </summary> 
            <value>
                The ResizeRegionBottomRightCorner property gets/sets the value of the 
                underlying JObject field, "resizeRegion.bottomRightCorner".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ResizeRegionSize">
            <summary>
                The ResizeRegionSize property defines a region 
                in pixels that will respond to user mouse interaction for resizing a frameless window
                <para>Default: 2</para>
            </summary> 
            <value>
                The ResizeRegionSize property gets/sets the value of the 
                underlying JObject field, "resizeRegion.size".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ShowTaskbarIcon">
            <summary>
                The ShowTaskbarIcon property represents a flag to show 
                the Window's icon in the taskbar.
                <para>Default: false</para>
            </summary> 
            <value>
                The ShowTaskbarIcon property gets/sets the value of the 
                underlying JObject field, "showTaskbarIcon".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.TaskbarIcon">
            <summary>
                The TaskbarIcon property represents the URL of 
                an icon to be shown on the desktop.
                <para>
                    Support formats: 
                        Portable Network Graphic (PNG); Size: 256 x 256 
                </para>
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The TaskbarIcon property gets/sets the value of the 
                underlying JObject field, "taskbarIcon".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.State">
            <summary>
                The State property represents a string that sets the 
                window to be "minimized", "maximized", or "normal" on creation. 
                <para>Default: "normal"</para>
            </summary> 
            <value>
                The State property gets/sets the value of the 
                underlying JObject field, "state".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.URL">
            <summary>
                The URL property represents the URL of the window. 
                <para>Default: "about:blank"</para>
            </summary> 
            <value>
                The URL property gets/sets the value of the 
                underlying JObject field, "url".
            </value>
        </member>
    </members>
</doc>
