{"version":3,"file":"static/preview.4484f4eae662f955c43a.bundle.js","sources":["webpack:///./src/system/logger.ts"],"sourcesContent":["enum levels {\r\n  verbose = 'debug',\r\n  debug = 'debug',\r\n  info = 'info',\r\n  warn = 'warn',\r\n  error = 'error'\r\n}\r\n\r\ntype SEVERITY = 'info' | 'warn' | 'error' | 'debug'\r\n\r\nlet currentLevel = levels.verbose\r\n\r\nlet sink = (logEvent: LogParams) => {\r\n  console[logEvent.level].call(\r\n    null,\r\n    `${logEvent.logger}:`,\r\n    ...Array.from(logEvent.args)\r\n  )\r\n}\r\n\r\nexport class Logger {\r\n  name: string\r\n\r\n  constructor(name: string) {\r\n    this.name = name\r\n  }\r\n\r\n  get isVerboseEnabled() {\r\n    return currentLevel === levels.verbose\r\n  }\r\n\r\n  /**\r\n   * verbose(message [, ...args]): expects a string log message and optional additional arguments\r\n   */\r\n  verbose(message: string, message2?: string, message3?: string) {\r\n    if (this.isVerboseEnabled) {\r\n      this.log('debug', arguments)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * debug(message [, ...args]): expects a string log message and optional additional arguments\r\n   */\r\n  debug(message?: string, message2?: string, message3?: string) {\r\n    if (currentLevel <= levels.debug) {\r\n      this.log('debug', arguments)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * info(message [, ...args]): expects a string log message and optional additional arguments\r\n   */\r\n  info(message?: string, message2?: any, message3?: any) {\r\n    if (currentLevel <= levels.info) {\r\n      this.log('info', arguments)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * warn(message [, ...args]): expects a string log message and optional additional arguments\r\n   */\r\n  warn(message?: string, message2?: string, message3?: string) {\r\n    if (currentLevel <= levels.warn) {\r\n      this.log('warn', arguments)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * error(message [, ...args]): expects a string log message and optional additional arguments\r\n   */\r\n  error(message?: string, message2?: any, message3?: string) {\r\n    if (currentLevel <= levels.error) {\r\n      this.log('error', arguments)\r\n    }\r\n  }\r\n\r\n  log(level: SEVERITY, args: IArguments) {\r\n    sink({\r\n      args,\r\n      level,\r\n      logger: this.name\r\n    })\r\n  }\r\n}\r\n\r\nfunction create(name: string) {\r\n  return new Logger(name)\r\n}\r\n\r\nfunction setLevel(level: levels) {\r\n  currentLevel = level\r\n}\r\n\r\ninterface LogParams {\r\n  args: IArguments\r\n  level: SEVERITY\r\n  logger: string\r\n}\r\n\r\nfunction setSink(sinkNew: (params: LogParams) => void) {\r\n  sink = sinkNew\r\n}\r\n\r\nexport default { create, setLevel, setSink, levels, Logger }\r\n"],"mappings":"AAAA","sourceRoot":""}